/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ColorMemoryQuestIndexImport } from './routes/color-memory-quest/index'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const RussianRouletteIndexLazyImport = createFileRoute('/russian-roulette/')()
const LiarCardIndexLazyImport = createFileRoute('/liar-card/')()
const HomeIndexLazyImport = createFileRoute('/home/')()
const DiceRollIndexLazyImport = createFileRoute('/dice-roll/')()
const CrocodileDentistIndexLazyImport = createFileRoute('/crocodile-dentist/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const RussianRouletteIndexLazyRoute = RussianRouletteIndexLazyImport.update({
  id: '/russian-roulette/',
  path: '/russian-roulette/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/russian-roulette/index.lazy').then((d) => d.Route),
)

const LiarCardIndexLazyRoute = LiarCardIndexLazyImport.update({
  id: '/liar-card/',
  path: '/liar-card/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/liar-card/index.lazy').then((d) => d.Route),
)

const HomeIndexLazyRoute = HomeIndexLazyImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/home/index.lazy').then((d) => d.Route))

const DiceRollIndexLazyRoute = DiceRollIndexLazyImport.update({
  id: '/dice-roll/',
  path: '/dice-roll/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/dice-roll/index.lazy').then((d) => d.Route),
)

const CrocodileDentistIndexLazyRoute = CrocodileDentistIndexLazyImport.update({
  id: '/crocodile-dentist/',
  path: '/crocodile-dentist/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/crocodile-dentist/index.lazy').then((d) => d.Route),
)

const ColorMemoryQuestIndexRoute = ColorMemoryQuestIndexImport.update({
  id: '/color-memory-quest/',
  path: '/color-memory-quest/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/color-memory-quest/': {
      id: '/color-memory-quest/'
      path: '/color-memory-quest'
      fullPath: '/color-memory-quest'
      preLoaderRoute: typeof ColorMemoryQuestIndexImport
      parentRoute: typeof rootRoute
    }
    '/crocodile-dentist/': {
      id: '/crocodile-dentist/'
      path: '/crocodile-dentist'
      fullPath: '/crocodile-dentist'
      preLoaderRoute: typeof CrocodileDentistIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dice-roll/': {
      id: '/dice-roll/'
      path: '/dice-roll'
      fullPath: '/dice-roll'
      preLoaderRoute: typeof DiceRollIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/home/': {
      id: '/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/liar-card/': {
      id: '/liar-card/'
      path: '/liar-card'
      fullPath: '/liar-card'
      preLoaderRoute: typeof LiarCardIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/russian-roulette/': {
      id: '/russian-roulette/'
      path: '/russian-roulette'
      fullPath: '/russian-roulette'
      preLoaderRoute: typeof RussianRouletteIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/color-memory-quest': typeof ColorMemoryQuestIndexRoute
  '/crocodile-dentist': typeof CrocodileDentistIndexLazyRoute
  '/dice-roll': typeof DiceRollIndexLazyRoute
  '/home': typeof HomeIndexLazyRoute
  '/liar-card': typeof LiarCardIndexLazyRoute
  '/russian-roulette': typeof RussianRouletteIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/color-memory-quest': typeof ColorMemoryQuestIndexRoute
  '/crocodile-dentist': typeof CrocodileDentistIndexLazyRoute
  '/dice-roll': typeof DiceRollIndexLazyRoute
  '/home': typeof HomeIndexLazyRoute
  '/liar-card': typeof LiarCardIndexLazyRoute
  '/russian-roulette': typeof RussianRouletteIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/color-memory-quest/': typeof ColorMemoryQuestIndexRoute
  '/crocodile-dentist/': typeof CrocodileDentistIndexLazyRoute
  '/dice-roll/': typeof DiceRollIndexLazyRoute
  '/home/': typeof HomeIndexLazyRoute
  '/liar-card/': typeof LiarCardIndexLazyRoute
  '/russian-roulette/': typeof RussianRouletteIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/color-memory-quest'
    | '/crocodile-dentist'
    | '/dice-roll'
    | '/home'
    | '/liar-card'
    | '/russian-roulette'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/color-memory-quest'
    | '/crocodile-dentist'
    | '/dice-roll'
    | '/home'
    | '/liar-card'
    | '/russian-roulette'
  id:
    | '__root__'
    | '/'
    | '/color-memory-quest/'
    | '/crocodile-dentist/'
    | '/dice-roll/'
    | '/home/'
    | '/liar-card/'
    | '/russian-roulette/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ColorMemoryQuestIndexRoute: typeof ColorMemoryQuestIndexRoute
  CrocodileDentistIndexLazyRoute: typeof CrocodileDentistIndexLazyRoute
  DiceRollIndexLazyRoute: typeof DiceRollIndexLazyRoute
  HomeIndexLazyRoute: typeof HomeIndexLazyRoute
  LiarCardIndexLazyRoute: typeof LiarCardIndexLazyRoute
  RussianRouletteIndexLazyRoute: typeof RussianRouletteIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ColorMemoryQuestIndexRoute: ColorMemoryQuestIndexRoute,
  CrocodileDentistIndexLazyRoute: CrocodileDentistIndexLazyRoute,
  DiceRollIndexLazyRoute: DiceRollIndexLazyRoute,
  HomeIndexLazyRoute: HomeIndexLazyRoute,
  LiarCardIndexLazyRoute: LiarCardIndexLazyRoute,
  RussianRouletteIndexLazyRoute: RussianRouletteIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/color-memory-quest/",
        "/crocodile-dentist/",
        "/dice-roll/",
        "/home/",
        "/liar-card/",
        "/russian-roulette/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/color-memory-quest/": {
      "filePath": "color-memory-quest/index.tsx"
    },
    "/crocodile-dentist/": {
      "filePath": "crocodile-dentist/index.lazy.tsx"
    },
    "/dice-roll/": {
      "filePath": "dice-roll/index.lazy.tsx"
    },
    "/home/": {
      "filePath": "home/index.lazy.tsx"
    },
    "/liar-card/": {
      "filePath": "liar-card/index.lazy.tsx"
    },
    "/russian-roulette/": {
      "filePath": "russian-roulette/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
